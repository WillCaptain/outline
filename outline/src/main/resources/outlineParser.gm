/*
* this is outline parser for a new dynamic language inferred by GCP method
* huizi 2024
*/
parser grammar OutlineParser;

options {
    tokenVocab = OutlineLexer;
}
//in msll, a root non terminal is required
root
    :  module_statement? import_statement* statement+ export_statement?
    ;
//---------statements----------------
statement
    : comment
    | variable_declarator
    | expression_statement
    | return_statement
//    | module_statement
//    | import_statement
//    | export_statement
//    | classDeclaration
//    | functionDeclaration
//    | expressionStatement
//    | iterationStatement
//    | continueStatement
//    | breakStatement
//    | returnStatement
//    | yieldStatement
//    | withStatement
//    | labelledStatement
//    | switchStatement
//    | throwStatement
//    | tryStatement
//    | debuggerStatement
    ;

//--------statements--------------
module_statement
    : 'module' factor_expression
    ;
import_statement
    : 'import' ('*' | (ID ('as' ID)? (',' ID ('as' ID)? )*)) 'from' factor_expression ';'
    ;
export_statement
    : 'export' ID ('as' ID)? ','+ ID ('as' ID)? ';'
    ;
comment
    : SingleLineComment
    | MultiLineComment
    ;
variable_declarator
    : ('let'|'var') {notLineTerminator()} argument '=' expression (',' argument '=' expression)* ';'
    ;
return_statement
    : 'return' expression? ';'
    ;
//---------------type-----------------
//declared_outline
//    : fix_outline (('|'|'&') fix_outline)*
//    ;
declared_outline
    : sum_type
    | func_type
    | non_func_type
    ;
sum_type
    : (non_func_type|literal) (('|'|'&') (non_func_type|literal))+
    ;
non_func_type
    : Number_Type | Int_Type | Float_Type | Double_Type | String_Type | tuple_type | entity_type | array_type | map_type |  '?' | ID | factor_type
    ;
tuple_type
    : '(' declared_outline (','declared_outline)+ ')'
    ;
entity_type
    : '{' (argument (','argument)* ','?)? '}'
    ;
array_type
    : '[' declared_outline ']'
    ;
map_type
    : '[' declared_outline ':' declared_outline ']'
    ;
func_type
    : (sum_type|non_func_type) '->' declared_outline
    ;
reference_type
    : Function? '<'argument (','argument)* '>'
    ;
factor_type
    : '(' declared_outline ')'
    ;
//------------expressions-------------
expression
    : assignment ('as' declared_outline)?
    ;
assignment
    : conditional_expression (('='|'+='|'-='|'*='|'/=') assignment)?
    ;
conditional_expression
    : if_expression
    | ternary_expression
    ;
if_expression
    : 'if' '(' expression ')' expression ('else' expression)?
    ;
ternary_expression
    : or_expression ('?' expression ':' conditional_expression)?
    ;
or_expression
  : and_expression ('||' and_expression)*
  ;

and_expression
  : equality_expression ('&&' equality_expression)*
  ;

equality_expression
  : relational_expression (('==' | '!=') relational_expression)*
  ;

relational_expression
  : numeric_expression (('<' | '>' | '<=' | '>=') numeric_expression)*
  ;
numeric_expression
    :term_expression (('+'|'-') term_expression)*
    ;
term_expression
    :unary_expression (('*'|'/'|'%'|'^') unary_expression)*
    ;
unary_expression
    : ('++' | '--' | '-' | '!') factor_expression
    |factor_expression ('++'|'--')?
    ;
factor_expression
    : literal
    | ID
    | block
    | factor_expression '[' expression ']'                           # array_map_accessor
    | factor_expression '.' (ID|INT)                                 # entity_member_accessor
    | factor_expression '(' (expression (','+ expression)*)? ')'     # function_call
    | factor_expression '<' declared_outline '>'                     # reference_call
    | factor_expression '&' expression                               # poly_expression
    | '(' expression ')'
    ;
literal
    : number
    | STRING
    | entity
    | tuple
    | This
    | array
    | map
    | lambda
    ;
number
    : INT ('.' INT)? | DOUBLE | FLOAT
    ;
expression_statement
    : expression ((',' expression)* ';')?
    ;

block
    : '{' statement* '}'
    ;
array
    : '[' (array_enum_items | array_iterate_expression)? ']'
    ;
array_enum_items
    : expression (',' expression)*
    ;
array_iterate_expression
    : array_iterate_range (',' INT ',' lambda ',' lambda)?
    ;
array_iterate_range
    : INT? '...' INT
    ;
map
    : '[' (':' | ( literal ':' expression (',' literal ':' expression)* )) ']'
    ;
entity
    : '{' property_assignment (',' property_assignment)* ','? '}'
    ;
tuple
    : '(' expression (','expression)* ')'
    ;
property_assignment
    : (('let'|'var') {notLineTerminator()})? argument '=' expression
    ;
lambda
    : reference_type? lambda_args '->' expression
    ;
lambda_args
    : ID
    | function_args'
    ;
function_args'
    : '(' (argument (','+ argument)*)? ')'
    ;
argument
    : ID (':' declared_outline)?
    ;


